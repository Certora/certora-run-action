# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-action.json
name: Certora Run Action
description: |-
  Test

inputs:
  certora-key:
    required: true
    description: |-
      The Certora key to use for the `certoraRun` command.

  cli-version:
    required: false
    description: |-
      The version of the `certora-cli` to use. If not specified, the latest version
      will be used.

      Example:

      ```yaml
      cli-version: 7.0.0
      ```
  configurations:
    required: true
    description: |-
      List of paths to configuration files to use for the `certoraRun` command.

      Example:

      ```yaml
      configurations: |-
        certConfigs/config1.conf
        certConfigs/config2.conf
        certConfigs/config3.conf
      ```
  solc-versions:
    required: true
    description: |-
      List of Solidity versions to use for the `certoraRun` command.

      Example:

      ```yaml
      solc-versions: |-
        0.5.16
        0.6.12
        0.7.6
      ```
  solc-remove-version-prefix:
    required: false
    description: |-
      The prefix to remove from the Solidity version when saving binaries.
  server:
    default: production
    description: |-
      The server to run the tests on. Default is `production`.
      Options: `production`, `staging`, or `vaas-dev`.
  use-alpha:
    default: "false"
    description: |-
      Whether to use the alpha version of the `certora-cli`.
  use-beta:
    default: "false"
    description: |-
      Whether to use the beta version of the `certora-cli`.
  job-name:
    default: ${{ github.job }}
    description: |-
      The name of the job. Default is the name of the job that called this workflow.

runs:
  using: "composite"
  steps:
    - name: Fetch Relevant Commit SHA for the Event
      shell: bash
      run: |
        COMMIT_SHA=""
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          COMMIT_SHA="${{ github.sha }}"
        elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          COMMIT_SHA="${{ github.event.workflow_run.head_commit.id }}"
        elif [[ "${{ github.event_name }}" == "commit_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
          COMMIT_SHA="${{ github.event.review.commit_id }}"
        elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        else
          COMMIT_SHA="$(git rev-parse HEAD)"
        fi
        echo "COMMIT_SHA=${COMMIT_SHA}" >> "$GITHUB_ENV"
        echo "SHORT_COMMIT_SHA=${COMMIT_SHA:0:12}" >> "$GITHUB_ENV"

    - name: Setup ENV & Variables
      shell: bash
      id: setup-env
      run: |
        CERT_LOG_DIR="/tmp/certora-logs/"
        mkdir -p "$CERT_LOG_DIR"
        echo "LOG_DIR=$CERT_LOG_DIR" >> "$GITHUB_ENV"

        echo "MESSAGE_SUFFIX=GH:${{ github.repository }}/${SHORT_COMMIT_SHA}" >> "$GITHUB_ENV"
        echo "short_sha=${SHORT_COMMIT_SHA}" >> "$GITHUB_OUTPUT"

        GROUP_ID="$(cat /proc/sys/kernel/random/uuid)"
        echo "GROUP_ID=$GROUP_ID" >> $GITHUB_ENV
        echo "group_id=$GROUP_ID" >> $GITHUB_OUTPUT

        mkdir -p /opt/solc-bin
        echo "/opt/solc-bin/" >> $GITHUB_PATH

        echo "${{ inputs.cli-version }}-${{ inputs.use-alpha }}-${{ inputs.use-beta }}" > .certora-cache-key

        CERTORA_REPORT_FILE="/tmp/certora-logs/REPORT-${GROUP_ID}.md"
        echo "CERTORA_REPORT_FILE=$CERTORA_REPORT_FILE" >> "$GITHUB_ENV"
        echo "report_file=$CERTORA_REPORT_FILE" >> "$GITHUB_OUTPUT"

        CERTORA_SUBDOMAIN="prover"
        if [[ "${{ inputs.server }}" == "vaas-dev" || "${{ inputs.server }}" == "development" ]]; then
          CERTORA_SUBDOMAIN="vaas-dev"
        elif [[ "${{ inputs.server }}" == "staging" || "${{ inputs.server }}" == "vaas-stg" ]]; then
          CERTORA_SUBDOMAIN="vaas-stg"
        fi

        echo "CERTORA_SUBDOMAIN=$CERTORA_SUBDOMAIN" >> "$GITHUB_ENV"
        echo 'certora_subdomain=$CERTORA_SUBDOMAIN' >> "$GITHUB_OUTPUT"

    - name: Install uv
      uses: astral-sh/setup-uv@v4
      with:
        enable-cache: true
        cache-dependency-glob: .certora-cache-key

    - name: Install certora-cli
      shell: bash
      run: |
        CERT_CLI_PACKAGE="certora-cli"
          if [ '${{ inputs.use_alpha }}' == 'true' ]; then
            CERT_CLI_PACKAGE="certora-cli-alpha"
          elif [ '${{ inputs.use_beta }}' == 'true' ]; then
            CERT_CLI_PACKAGE="certora-cli-beta"
          fi
        CERT_CLI_PACKAGE="${CERT_CLI_PACKAGE}${CERT_CLI_VERSION:+==$CERT_CLI_VERSION}"
        echo "CERT_CLI_PACKAGE=$CERT_CLI_PACKAGE" >> $GITHUB_ENV
        uv tool install "$CERT_CLI_PACKAGE"
      env:
        CERT_CLI_VERSION: ${{ inputs.cli_version }}

    - name: Cache Solidity Binaries
      id: solc-cache
      uses: actions/cache@v4
      with:
        path: /opt/solc-bin
        key: solc-bin

    - name: Download Solidity Binaries
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/solc-downlaod.sh "${{ inputs.solc-remove-version-prefix }}" "${{ inputs.solc-versions }}"

    - name: Certora Run
      id: certora-run
      shell: bash
      run: |
        ${{ github.action_path }}/scripts/run-certora.sh
      env:
        CERTORA_CONFIGURATIONS: "${{ inputs.configurations }}"
        CERTORA_SERVER: "${{ inputs.server }}"
        CERTORAKEY: "${{ inputs.certora-key }}"

    - name: Add GH Status
      if: always()
      shell: bash
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${GITHUB_TOKEN}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/statuses/$COMMIT_SHA \
          -d '{
            "state":"pending",
            "target_url":"https://${{ steps.setup-env.outputs.certora_subdomain }}.certora.com/?text=${{ steps.setup-env.outputs.short_sha }}&allUsers=true&groupIds=${{ steps.setup-env.outputs.group_id }}",
            "description":"0/${{ steps.certora-run.outputs.total_jobs }} jobs finished.",
            "context":"certora-run/${{ steps.group-id.outputs.group_id }}"
          }'

    - name: Upload Logs
      uses: actions/upload-artifact@v4
      id: upload-logs
      if: always()
      with:
        name: certora-run-logs-${{ steps.group-id.outputs.group_id }}-${{ github.run_id }}
        path: /tmp/certora-logs/*

    - name: Add Summary To Report
      shell: bash
      if: always()
      run: |
        echo >>"$REPORT_FILE" <<EOF

        ### Certora Run Summary

        - Started ${{ steps.certora-run.outputs.total_jobs }} jobs
        - ${{ steps.certora-run.outputs.failed_jobs }} jobs failed

        [Download Logs](${{ steps.upload-logs.outputs.artifact-url }})
        EOF

    - name: Add report comment
      if: always()
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ steps.setup-env.outputs.group_id }}
        message-path: ${{ steps.setup-env.outputs.report_file }}
