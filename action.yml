# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-action.json
name: Certora Run Action
description: |-
  Certora Run Action submits prover jobs to Certora Cloud for verification and returns a
  report with aggregated results.

branding:
  color: blue
  icon: cloud-lightning

inputs:
  certora-key:
    required: true
    description: |-
      The Certora key to use for the `certoraRun` command.

  cli-version:
    required: false
    description: |-
      The version of the `certora-cli` to use. If not specified, the latest version
      will be used.

      Example:

      ```yaml
      cli-version: 7.0.0
      ```
  cli-release:
    required: false
    default: stable
    description: |-
      The release type of the `certora-cli` to use. Default is `stable`.
      Options: `stable`, `alpha`, `beta`, or a custom branch name.

      Everything other than `stable` should only be used for testing purposes!

      Example:

      ```yaml
      cli-release: beta
      ```
  configurations:
    required: true
    description: |-
      List of paths to configuration files to use for the `certoraRun` command.

      Example:

      ```yaml
      configurations: |-
        certConfigs/config1.conf
        certConfigs/config2.conf
        certConfigs/config3.conf
      ```
  ecosystem:
    required: true
    default: evm
    description: |-
      The ecosystem to use for the `certoraRun` command. Default is `evm`.
      Options: `evm` and `solana`.

  solc-versions:
    required: false
    description: |-
      List of Solidity versions to use for the `certoraRun` command. The first version
      in the list will be used as the default version (solc binary). Each version will
      be available as both `solc<version>` and `solc-<version>` in the environment.

      Example:

      ```yaml
      solc-versions: |-
        0.5.16
        0.6.12
        0.7.6
      ```
  solc-remove-version-prefix:
    required: false
    description: |-
      The prefix to remove from the Solidity version when saving binaries.
  server:
    default: production
    description: |-
      The server to run the tests on. Default is `production`.
      Options: `production`, `staging`, or `vaas-dev`.
  job-name:
    default: ${{ github.job }}
    description: |-
      The name of the job. Default is the name of the job that called this workflow.
  install-java:
    default: "true"
    description: |-
      Whether to install Java for type checking. Default is `true`.
  compilation-steps-only:
    default: "false"
    description: |-
      Whether to only run the compilation steps. Default is `false`.
  comment-fail-only:
    default: "true"
    description: |-
      Add a comment to the PR only if the run fails.
  debug-level:
    default: "0"
    description: |-
      The debug level to use for the action command. Default is `0`.
      Options: `0`, `1`, `2`, or `3`.
  working-directory:
    default: ${{ github.workspace }}
    description: |-
      The working directory to run the action in. Default is the current working directory.
  rust-setup:
    default: "true"
    description: |-
      Whether to set up Rust for Solana. Default is `true`.
  rust-version:
    required: false
    default: "stable"
    description: |-
      The version of Rust to install. If not specified, the latest stable version will be used.
      The minimum supported version is `1.82.0`.
  rust-additional-versions:
    required: false
    default: ""
    description: |-
      Additional versions of Rust to install, separated by spaces. Example: `1.75 1.79`.
  certora-sbf-version:
    required: false
    default: ""
    description: |-
      The version of `cargo-certora-sbf` to install. If not specified, the latest version will be used.
  certora-sbf-options:
    required: false
    default: ""
    description: |-
      Additional options to pass to the `cargo certora-sbf` command. This can be used to specify
      additional flags or configurations for the Certora SBF tool. See https://github.com/Certora/cargo-certora-sbf
      for more details on available options.
  use-hard-links:
    required: false
    default: "true"
    description: |-
      Whether to use hard links when copying files. Default is `true`.
runs:
  using: "composite"
  steps:
    - name: Verify Certora key and GitHub Token
      shell: bash
      run: |
        FAILED=false
        DOC_LINK="For more details please refer to the documentation at https://github.com/Certora/certora-run-action."
        if [[ -z "${{ inputs.certora-key }}" ]]; then
          MESSAGE="Please provide a valid Certora key as a secret input. $DOC_LINK"
          echo "::error title=Certora Key is missing::$MESSAGE"
          FAILED=true
        fi

        if [[ -z "$GITHUB_TOKEN" ]]; then
          MESSAGE="Please provide a valid GitHub token as an environment variable. $DOC_LINK"
          echo "::error title=GitHub Token is missing::$MESSAGE"
          FAILED=true
        fi

        if [[ "${{ inputs.ecosystem }}" == "evm" && -z "${{ inputs.solc-versions }}" ]]; then
          MESSAGE="Please provide a valid list of Solidity versions when using 'evm' ecosystem. $DOC_LINK"
          echo "::error title=Solidity Versions are missing::$MESSAGE"
          FAILED=true
        fi

        if [[ "$FAILED" == "true" ]]; then
          exit 1
        fi
    - name: Fetch Relevant Commit SHA for the Event
      shell: bash
      run: |
        COMMIT_SHA=""
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
        elif [[ "${{ github.event_name }}" == "push" ]]; then
          COMMIT_SHA="${{ github.sha }}"
        elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
          COMMIT_SHA="${{ github.event.workflow_run.head_commit.id }}"
        elif [[ "${{ github.event_name }}" == "commit_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
          COMMIT_SHA="${{ github.event.review.commit_id }}"
        elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
          COMMIT_SHA="${{ github.event.comment.commit_id }}"
        else
          COMMIT_SHA="$(git rev-parse HEAD)"
        fi
        echo "COMMIT_SHA=${COMMIT_SHA}" >> "$GITHUB_ENV"
        echo "SHORT_COMMIT_SHA=${COMMIT_SHA:0:12}" >> "$GITHUB_ENV"

    - name: Setup ENV & Variables
      shell: bash
      id: setup-env
      run: |
        GROUP_ID="$(cat /proc/sys/kernel/random/uuid)"
        echo "GROUP_ID=$GROUP_ID" >> $GITHUB_ENV
        echo "group_id=$GROUP_ID" >> $GITHUB_OUTPUT

        CERTORA_LOG_DIR="/tmp/certora-logs/$GROUP_ID"
        mkdir -p "$CERTORA_LOG_DIR"
        echo "CERTORA_LOG_DIR=$CERTORA_LOG_DIR" >> "$GITHUB_ENV"

        echo "MESSAGE_SUFFIX=GH:${{ github.repository }}/${SHORT_COMMIT_SHA}" >> "$GITHUB_ENV"
        echo "short_sha=${SHORT_COMMIT_SHA}" >> "$GITHUB_OUTPUT"

        mkdir -p /opt/solc-bin
        echo "/opt/solc-bin/" >> $GITHUB_PATH

        echo "${{ inputs.cli-version }}-${{ inputs.cli-release }}" > .certora-cache-key

        CERTORA_REPORT_FILE="/tmp/certora-logs/REPORT-${GROUP_ID}.md"
        echo "CERTORA_REPORT_FILE=$CERTORA_REPORT_FILE" >> "$GITHUB_ENV"
        echo "report_file=$CERTORA_REPORT_FILE" >> "$GITHUB_OUTPUT"

        CERTORA_SUBDOMAIN="prover"
        CERTORA_API_SUBDOMAIN="data-api"
        if [[ "${{ inputs.server }}" == "vaas-dev" || "${{ inputs.server }}" == "development" ]]; then
          CERTORA_SUBDOMAIN="vaas-dev"
          CERTORA_API_SUBDOMAIN="data-api-dev"
        elif [[ "${{ inputs.server }}" == "staging" || "${{ inputs.server }}" == "vaas-stg" ]]; then
          CERTORA_SUBDOMAIN="vaas-stg"
          CERTORA_API_SUBDOMAIN="data-api-stg"
        fi

        echo "CERTORA_ACTION_REF=$CERTORA_ACTION_REF" >> "$GITHUB_ENV"
        echo "CERTORA_SUBDOMAIN=$CERTORA_SUBDOMAIN" >> "$GITHUB_ENV"
        echo "certora_subdomain=$CERTORA_SUBDOMAIN" >> "$GITHUB_OUTPUT"
        echo "CERTORA_API_SUBDOMAIN=$CERTORA_API_SUBDOMAIN" >> "$GITHUB_ENV"
      env:
        CERTORA_ACTION_REF: ${{ github.action_ref }}

    - name: Install uv
      uses: astral-sh/setup-uv@v6
      with:
        enable-cache: true
        cache-dependency-glob: .certora-cache-key

    - name: Install certora-cli
      shell: bash
      run: |
        if [ '${{ inputs.cli-release }}' == 'stable' ]; then
          CERT_CLI_PACKAGE="certora-cli"
        elif [ '${{ inputs.cli-release }}' == 'beta' ]; then
          echo "::warning title=Beta CLI Release::Using the beta version of certora-cli. This is not recommended for production use!"
          CERT_CLI_PACKAGE="certora-cli-beta"
        elif [ '${{ inputs.cli-release }}' == 'alpha' ]; then
          echo "::warning title=Alpha CLI Release::Using the alpha version of certora-cli. This is not recommended for production use!"
          CERT_CLI_PACKAGE="certora-cli-alpha-master"
        else
          echo "::warning title=Custom CLI Release::Using a custom branch for certora-cli is not recommended. Ensure you know what you are doing!"
          CERT_CLI_PACKAGE="certora-cli-${{ inputs.cli-release }}"
        fi
        CERT_CLI_PACKAGE="${CERT_CLI_PACKAGE}${CERT_CLI_VERSION:+==$CERT_CLI_VERSION}"
        echo "CERT_CLI_PACKAGE=$CERT_CLI_PACKAGE" >> $GITHUB_ENV
        echo "Using version $CERT_CLI_PACKAGE"
        uv tool install "$CERT_CLI_PACKAGE"
        uv tool list
      env:
        CERT_CLI_VERSION: ${{ inputs.cli-version }}

    - name: Cache Solidity Binaries
      id: solc-cache
      uses: actions/cache@v4
      with:
        path: /opt/solc-bin
        key: solc-bin

    - name: Download Solidity Binaries
      if: ${{ inputs.solc-versions }}
      shell: bash
      run: |
        bash ${{ github.action_path }}/scripts/solc-download.sh \
          "${{ inputs.solc-remove-version-prefix }}" \
          "${{ inputs.solc-versions }}"
      env:
        DEBUG_LEVEL: "${{ inputs.debug-level }}"

    - name: Install Java
      if: ${{ inputs.install-java == 'true' }}
      uses: actions/setup-java@v4
      with:
        java-version: "21"
        java-package: jre
        distribution: zulu

    - name: Install rust for solana
      if: ${{ inputs.ecosystem == 'solana' && inputs.rust-setup == 'true' }}
      uses: Certora/rust-setup-action@v1
      with:
        version: ${{ inputs.rust-version }}
        additional-versions: ${{ inputs.rust-additional-versions }}
        certora-sbf-version: ${{ inputs.certora-sbf-version }}
        certora-sbf-options: ${{ inputs.certora-sbf-options }}

    - name: Certora Run
      id: certora-run
      working-directory: ${{ inputs.working-directory }}
      shell: bash
      run: |
        RUN_CERTORA="${{ github.action_path }}/scripts/run-certora.sh"
        GH_APP_INTEGRATION="${{ github.action_path }}/scripts/gh-app-integration.sh"

        if [[ "$CERTORA_COMPILATION_STEPS_ONLY" == "false" ]]; then
          CERTORA_COMPILATION_STEPS_ONLY=true bash "$RUN_CERTORA" && \
          bash "$GH_APP_INTEGRATION" && \
          CERTORA_COMPILATION_STEPS_ONLY=false bash "$RUN_CERTORA"
        else
          bash "$RUN_CERTORA"
        fi
      env:
        CERTORA_CONFIGURATIONS: "${{ inputs.configurations }}"
        CERTORA_SERVER: "${{ inputs.server }}"
        CERTORAKEY: "${{ inputs.certora-key }}"
        CERTORA_JOB_NAME: "${{ inputs.job-name }}"
        CERTORA_COMPILATION_STEPS_ONLY: "${{ inputs.compilation-steps-only }}"
        CERTORA_ECOSYSTEM: "${{ inputs.ecosystem }}"
        DEBUG_LEVEL: "${{ inputs.debug-level }}"
        CERTORA_USE_HARD_LINKS: "${{ inputs.use-hard-links }}"

    - name: Add GH Status
      if: always()
      shell: bash
      run: |
        if [[ ${{ steps.certora-run.outputs.total_jobs }} -ne 0 ]]; then
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${GITHUB_TOKEN}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/statuses/$COMMIT_SHA \
            -d '{
              "state":"pending",
              "target_url":"https://${{ steps.setup-env.outputs.certora_subdomain }}.certora.com/?text=${{ steps.setup-env.outputs.short_sha }}&allUsers=true&groupIds=${{ steps.setup-env.outputs.group_id }}",
              "description":"0/${{ steps.certora-run.outputs.total_jobs }} jobs finished.",
              "context":"certora-run/${{ steps.setup-env.outputs.group_id }}"
            }'
        fi

    - name: Upload Logs
      uses: actions/upload-artifact@v4
      id: upload-logs
      if: always()
      with:
        name: certora-run-logs-${{ steps.setup-env.outputs.group_id }}-${{ github.run_id }}
        path: /tmp/certora-logs/*

    - name: Add Summary To Report
      shell: bash
      if: always()
      run: |
        echo "[Download Logs](${{ steps.upload-logs.outputs.artifact-url }})" >> "${{ steps.setup-env.outputs.report_file }}"

    - name: Add report comment
      if: ${{ failure() || inputs.comment-fail-only == 'false' }}
      uses: mshick/add-pr-comment@v2
      with:
        message-id: ${{ steps.setup-env.outputs.group_id }}
        message-path: ${{ steps.setup-env.outputs.report_file }}
