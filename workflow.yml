# yaml-language-server: $schema=https://raw.githubusercontent.com/SchemaStore/schemastore/refs/heads/master/src/schemas/json/github-workflow.json
name: Reusable Workflow
on:
  workflow_call:
    inputs:
      cli-version:
        required: false
        type: string
        description: |-
          The version of the `certora-cli` to use. If not specified, the latest version
          will be used.

          Example:

          ```yaml
          cli-version: 7.0.0
          ```
      configurations:
        required: true
        type: string
        description: |-
          List of paths to configuration files to use for the `certoraRun` command.

          Example:

          ```yaml
          configurations: |-
            certConfigs/config1.conf
            certConfigs/config2.conf
            certConfigs/config3.conf
          ```
      solc-versions:
        required: true
        type: string
        description: |-
          List of Solidity versions to use for the `certoraRun` command.

          Example:

          ```yaml
          solc-versions: |-
            0.5.16
            0.6.12
            0.7.6
          ```
      use-alpha:
        required: false
        type: boolean
        description: |-
          Whether to use the alpha version of the `certora-cli`.
      use-beta:
        required: false
        type: boolean
        description: |-
          Whether to use the beta version of the `certora-cli`.
    secrets:
      certora-key:
        required: true

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  certora_run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: feat/initial-setup
      - name: Fetch Relevant Commit SHA for the Event
        run: |
          COMMIT_SHA=""
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            COMMIT_SHA="${{ github.sha }}"
          elif [[ "${{ github.event_name }}" == "workflow_run" ]]; then
            COMMIT_SHA="${{ github.event.workflow_run.head_commit.id }}"
          elif [[ "${{ github.event_name }}" == "commit_comment" ]]; then
            COMMIT_SHA="${{ github.event.comment.commit_id }}"
          elif [[ "${{ github.event_name }}" == "issue_comment" ]]; then
            COMMIT_SHA="${{ github.event.comment.commit_id }}"
          elif [[ "${{ github.event_name }}" == "pull_request_review" ]]; then
            COMMIT_SHA="${{ github.event.review.commit_id }}"
          elif [[ "${{ github.event_name }}" == "pull_request_review_comment" ]]; then
            COMMIT_SHA="${{ github.event.comment.commit_id }}"
          else
            COMMIT_SHA="$(git rev-parse HEAD)"
          fi
          echo "COMMIT_SHA=${COMMIT_SHA:0:12}" >> $GITHUB_ENV

      - name: Group ID and Message
        run: |
          echo "MESSAGE_SUFFIX=${{ github.repository }}/${COMMIT_SHA}" >> $GITHUB_ENV
          echo "GROUP_ID=$(cat /proc/sys/kernel/random/uuid)" >> $GITHUB_ENV

      - name: Cache CLI Dependencies Key
        run: echo "${{ inputs.cli-version }}-${{ inputs.use-alpha }}-${{ inputs.use-beta }}" > .certora-cache

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: .certora-cache

      - name: Install certora-cli
        run: |
          CERT_CLI_PACKAGE="certora-cli"
            if [ '${{ inputs.use_alpha }}' == 'true' ]; then
              CERT_CLI_PACKAGE="certora-cli-alpha"
            elif [ '${{ inputs.use_beta }}' == 'true' ]; then
              CERT_CLI_PACKAGE="certora-cli-beta"
            fi
          CERT_CLI_PACKAGE="${CERT_CLI_PACKAGE}${CERT_CLI_VERSION:+==$CERT_CLI_VERSION}"
          echo "CERT_CLI_PACKAGE=$CERT_CLI_PACKAGE" >> $GITHUB_ENV
          uv tool install "$CERT_CLI_PACKAGE"
        env:
          CERT_CLI_VERSION: ${{ inputs.cli_version }}

      - name: Cache Solidity Binaries
        id: solc-cache
        uses: actions/cache@v4
        with:
          path: /opt/solc-bin
          key: solc-bin

      - name: Download Solidity Binaries
        run: |
          mkdir -p /opt/solc-bin
          VERSIONS="${{ inputs.solc-versions }}"
          GH_LINK='https://api.github.com/repos/ethereum/solidity/releases/tags/v'
          JQ_FILTER='.assets[] | select(.name == "solc-static-linux") | .url'
          AUTH_HEADER="Authorization: Bearer ${GITHUB_TOKEN}"

          for version in $VERSIONS; do
            version="${version#v}"
            if [ ! -f "/opt/solc-bin/solc$version" ]; then
              echo "Downloading Solidity $version"
              RELEASE_DETAIL=$(curl -sH "$AUTH_HEADER" "${GH_LINK}${version}")
              if [[ -z "$RELEASE_DETAIL" || $(jq 'has("assets")' <<< "$RELEASE_DETAIL") == "false" ]]; then
                echo "Failed to fetch release details for Solidity $version"
                echo "$RELEASE_DETAIL"
                exit 1
              fi
              BIN_LINK=$(jq -r "$JQ_FILTER" <<< "$RELEASE_DETAIL")
              curl -L \
                -H "Accept: application/octet-stream" \
                -H "$AUTH_HEADER" \
                "${BIN_LINK}" -o "/opt/solc-bin/solc$version"
            fi
          done

          ls -1 /opt/solc-bin/

      - name: Add Solidity to Github Path
        run: echo "/opt/solc-bin" >> $GITHUB_PATH

      - name: Sanitize confugurations
        run: |
          CONFIGURATIONS="${{ inputs.configurations }}"
          for conf in $CONFIGURATIONS; do
            echo "Sanitizing $conf"
            tmp_conf=$(mktemp)
            jq 'del(.wait_for_results)' $conf > $tmp_conf
            mv $tmp_conf $conf
          done

      - name: Run Certora
        run: |
          CONFIGURATIONS="${{ inputs.configurations }}"
          for conf in $CONFIGURATIONS; do
            echo "Running $conf"
            uvx --from "$CERT_CLI_PACKAGE" certoraRun $conf --msg "${MESSAGE_SUFFIX}" --group_id "${GROUP_ID}"
          done
        env:
          CERTORAKEY: ${{ secrets.certora-key }}
